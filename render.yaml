# render.yaml based on merging working parts with current MinIO setup

databases: # Correct top-level key for managed databases
  - name: project-catalog-postgres # Using a consistent naming prefix
    # plan: free # Removed to use existing instance
    region: oregon
    # postgresMajorVersion: 14 # Uncomment if you need a specific major version

services:
  # Redis Service (Managed by Render)
  - type: redis
    name: project-catalog-redis # Using a consistent naming prefix
    region: oregon
    # plan: free # Removed to use existing instance
    ipAllowList: # Required for Redis in blueprint
      - source: 0.0.0.0/0 # Allows access from any IP, suitable if protected by connection string
        description: "Allow all"

  # MinIO S3-compatible Storage (Private Service running official image)
  - type: web # MinIO itself runs as a web service internally
    name: minio-storage # Name we've been trying to link
    runtime: image
    image:
      url: docker.io/minio/minio:RELEASE.2023-05-04T21-44-30Z
    dockerCommand: minio server /data --address 0.0.0.0:$PORT --console-address 0.0.0.0:9001 # CMD for the image, $PORT should be substituted by Render
    healthCheckPath: /minio/health/live
    region: oregon
    plan: standard # MinIO might need a paid plan for disk and resources
    autoDeploy: false
    disk:
      name: minio-data
      mountPath: /data
      sizeGB: 10
    envVars:
      - key: MINIO_ROOT_USER
        generateValue: true
      - key: MINIO_ROOT_PASSWORD
        generateValue: true
      - key: MINIO_DEFAULT_BUCKETS
        value: "documents"
      # PORT is automatically set by Render for web services. MinIO needs to use it.
      # CONSOLE_PORT is not directly used by Render here, but MinIO command uses 9001.

  # MinIO Console (Optional, if you need external access to console)
  # This definition seems okay from your current file, but ensure it points to the correct MinIO service name
  - type: web
    name: minio-console # Separate service for the console proxy
    runtime: docker
    repo: https://github.com/callum-doty/project_catalog.git # Assuming your Dockerfile.minio-console is in this repo
    branch: main # Assuming it's on the main branch
    dockerContext: .
    dockerfilePath: ./Dockerfile.minio-console
    region: oregon
    plan: free
    autoDeploy: false
    envVars:
      - key: PORT # Port the Nginx console proxy will listen on (e.g., 10000)
        value: "10000" # Render will assign a public URL to this
      - key: MINIO_HOST
        fromService:
          name: minio-storage # Must match the name of your MinIO service
          type: web
          property: host
      - key: MINIO_CONSOLE_PORT # The port MinIO's console is actually running on inside its container
        value: "9001" # As per minio-storage's dockerCommand

  # Flask Web Service
  - type: web
    name: project-catalog-web # Current naming
    env: python # Assuming Python runtime, not Docker as in the old working example
    region: oregon
    plan: starter # Adjust as needed
    # repo, branch, buildCommand, startCommand would be needed if not Docker
    # If using Docker runtime for this service, define dockerfilePath etc.
    # For now, assuming Python runtime as per our recent attempts:
    buildCommand: |
      pip install --upgrade pip
      pip install -r requirements.txt
      python -m scripts.initialize_taxonomy
      FLASK_APP=src/wsgi.py python -m flask db upgrade
    startCommand: "sh start.sh" # Your existing start command
    healthCheckPath: "/password-check"
    envVars:
      - key: FLASK_APP # If your start.sh/gunicorn doesn't set it
        value: src/wsgi.py
      - key: FLASK_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: project-catalog-postgres # Match name in databases: block
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: project-catalog-redis # Match name of Redis service
          property: connectionString
      - key: MINIO_INTERNAL_S3_HOST # For internal S3 API connection
        fromService:
          name: minio-storage
          type: web
          property: host
      - key: MINIO_INTERNAL_S3_PORT # For internal S3 API connection
        fromService:
          name: minio-storage
          type: web
          property: port # This gets the $PORT Render assigned to minio-storage's S3 API
      - key: MINIO_PUBLIC_ENDPOINT # Publicly accessible URL for MinIO (for presigned URLs)
        value: "https://minio-storage-hmqe.onrender.com" # Corrected public URL for the minio-storage service
      - key: MINIO_REGION
        value: "oregon" # Match MinIO server region (Oregon)
      - key: MINIO_ACCESS_KEY
        fromService:
          name: minio-storage
          type: web
          envVarKey: MINIO_ROOT_USER
      - key: MINIO_SECRET_KEY
        fromService:
          name: minio-storage
          type: web
          envVarKey: MINIO_ROOT_PASSWORD
      - key: S3_BUCKET_NAME
        value: "documents"
      - key: USE_MOCK_STORAGE # Explicitly set to false
        value: "false"
      - key: SERVICE_TYPE
        value: web
      - key: SECRET_KEY
        generateValue: true
      # Add other necessary env vars like CLAUDE_API_KEY, APP_SETTINGS etc.
      # - key: CLAUDE_API_KEY
      #   sync: false
      - key: APP_SETTINGS
        value: "src.config.ProductionConfig"

  # Celery Worker Service
  - type: worker
    name: project-catalog-worker # Current naming
    env: python # Assuming Python runtime
    region: oregon
    plan: starter # Aligning with your paid plan that should support workers
    # buildCommand and startCommand similar to web service if Python runtime
    buildCommand: |
      pip install --upgrade pip
      pip install -r requirements.txt
    startCommand: "sh start.sh" # Your existing start command for worker
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: project-catalog-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: project-catalog-redis
          property: connectionString
      - key: MINIO_INTERNAL_S3_HOST # For internal S3 API connection
        fromService:
          name: minio-storage
          type: web
          property: host
      - key: MINIO_INTERNAL_S3_PORT # For internal S3 API connection
        fromService:
          name: minio-storage
          type: web
          property: port # This gets the $PORT Render assigned to minio-storage's S3 API
      - key: MINIO_REGION
        value: "oregon" # Match MinIO server region (Oregon)
      - key: MINIO_ACCESS_KEY
        fromService:
          name: minio-storage
          type: web
          envVarKey: MINIO_ROOT_USER
      - key: MINIO_SECRET_KEY
        fromService:
          name: minio-storage
          type: web
          envVarKey: MINIO_ROOT_PASSWORD
      - key: S3_BUCKET_NAME
        value: "documents"
      - key: USE_MOCK_STORAGE
        value: "false"
      - key: SERVICE_TYPE
        value: worker
      - key: SECRET_KEY # Sync with web service
        fromService:
          type: web
          name: project-catalog-web
          envVarKey: SECRET_KEY
      # Add other necessary env vars
      # - key: CLAUDE_API_KEY
      #   sync: false
      - key: APP_SETTINGS
        value: "src.config.ProductionConfig"
      - key: FLASK_ENV
        value: production
      # Add Dropbox environment variables required by the sync_dropbox task
      - key: DROPBOX_FOLDER_PATH
        value: "/test" # Specific Dropbox folder to sync
      - key: DROPBOX_ACCESS_TOKEN
        sync: false # IMPORTANT: Set this secret in Render UI for this worker service as well
  - type: cron
    name: project-catalog-cron
    runtime: docker # Changed from env: python
    dockerfilePath: ./Dockerfile.beat # Added Dockerfile path
    region: oregon
    plan: starter
    schedule: "0 * * * *"
    # buildCommand is removed (handled by Dockerfile)
    # startCommand is removed (handled by Dockerfile CMD)
    envVars:
      # SERVICE_TYPE might still be useful if your app code uses it, otherwise can be removed for beat
      - key: SERVICE_TYPE
        value: "beat"
      # PYTHON_VERSION is removed (handled by Dockerfile)
      - key: DATABASE_URL
        fromDatabase:
          name: project-catalog-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: project-catalog-redis
          property: connectionString
      - key: MINIO_INTERNAL_S3_HOST # For internal S3 API connection
        fromService:
          name: minio-storage
          type: web
          property: host
      - key: MINIO_INTERNAL_S3_PORT # For internal S3 API connection
        fromService:
          name: minio-storage
          type: web
          property: port # This gets the $PORT Render assigned to minio-storage's S3 API
      - key: MINIO_REGION
        value: "oregon" # Match MinIO server region (Oregon)
      - key: MINIO_ACCESS_KEY
        fromService:
          name: minio-storage
          type: web
          envVarKey: MINIO_ROOT_USER
      - key: MINIO_SECRET_KEY
        fromService:
          name: minio-storage
          type: web
          envVarKey: MINIO_ROOT_PASSWORD
      - key: S3_BUCKET_NAME
        value: "documents"
      - key: SECRET_KEY
        fromService:
          type: web
          name: project-catalog-web
          envVarKey: SECRET_KEY
      - key: FLASK_ENV
        value: "production"
      - key: APP_SETTINGS
        value: "src.config.ProductionConfig"

  - type: cron
    name: dropbox-sync-cron
    env: python # Using Python runtime
    region: oregon
    plan: starter # Aligning with other services, adjust if needed
    schedule: "0 * * * *" # Runs at the start of every hour
    buildCommand: |
      pip install --upgrade pip
      pip install -r requirements.txt
    startCommand: "celery -A src.catalog.tasks.celery_app call tasks.sync_dropbox"
    envVars:
      - key: DROPBOX_FOLDER_PATH
        value: "/test" # Specific Dropbox folder to sync
      - key: DROPBOX_ACCESS_TOKEN
        sync: false # IMPORTANT: Set this secret in Render UI for this service
      # Common environment variables, similar to other services
      - key: DATABASE_URL
        fromDatabase:
          name: project-catalog-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: project-catalog-redis
          property: connectionString
      - key: MINIO_INTERNAL_S3_HOST
        fromService:
          name: minio-storage
          type: web
          property: host
      - key: MINIO_INTERNAL_S3_PORT
        fromService:
          name: minio-storage
          type: web
          property: port
      - key: MINIO_REGION
        value: "oregon"
      - key: MINIO_ACCESS_KEY
        fromService:
          name: minio-storage
          type: web
          envVarKey: MINIO_ROOT_USER
      - key: MINIO_SECRET_KEY
        fromService:
          name: minio-storage
          type: web
          envVarKey: MINIO_ROOT_PASSWORD
      - key: S3_BUCKET_NAME
        value: "documents" # Target bucket in MinIO
      - key: SECRET_KEY # Sync with web service for consistency
        fromService:
          type: web
          name: project-catalog-web
          envVarKey: SECRET_KEY
      - key: FLASK_ENV
        value: "production"
      - key: APP_SETTINGS
        value: "src.config.ProductionConfig"
      # Optional: Override default rate limiting settings for the sync task if needed
      # - key: DOCUMENT_PROCESSING_DELAY
      #   value: "60" # e.g., 60 seconds delay between batches
      # - key: DROPBOX_BATCH_SIZE
      #   value: "10" # e.g., process 10 files per batch
      # - key: MAX_CONCURRENT_PROCESSING
      #   value: "5"  # e.g., max 5 concurrent operations (if applicable to task logic)
